@model IEnumerable<CPMS.Models.PaperReviewerModel>

@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<link rel="stylesheet" href="https://cdn.datatables.net/1.12.1/css/dataTables.bootstrap5.min.css" />
<style>
    td > * 
    {
        vertical-align : middle;
    }
</style>
<h1 style="text-align:center;">Match Submitted Papers with Reviewers</h1>

@{
    IEnumerable<int> ints = new List<int>();
    //Method that creates the contents for Bootstrap5's Popover
    Microsoft.AspNetCore.Html.IHtmlContent GeneratePopoverContent(TopicsModel topics)
    {
        string popoverContent = "<ol class='list-group list-group-numbered'>";
        if (topics.AnalysisOfAlgorithms)
        {
            popoverContent += "<li class='list-group-item'>" + Html.DisplayNameFor(model => topics.AnalysisOfAlgorithms) + "</li>";
        }
        if (topics.Applications)
        {
            popoverContent += "<li class='list-group-item'>" + Html.DisplayNameFor(model => topics.Applications) + "</li>";
        }
        if (topics.Architecture)
        {
            popoverContent += "<li class='list-group-item'>" + Html.DisplayNameFor(model => topics.Architecture) + "</li>";
        }
        if (topics.ArtificialIntelligence)
        {
            popoverContent += "<li class='list-group-item'>" + Html.DisplayNameFor(model => topics.ArtificialIntelligence) + "</li>";
        }
        if (topics.ComputerEngineering)
        {
            popoverContent += "<li class='list-group-item'>" + Html.DisplayNameFor(model => topics.ComputerEngineering) + "</li>";
        }
        if (topics.Curriculum)
        {
            popoverContent += "<li class='list-group-item'>" + Html.DisplayNameFor(model => topics.Curriculum) + "</li>";
        }
        if (topics.DataStructures)
        {
            popoverContent += "<li class='list-group-item'>" + Html.DisplayNameFor(model => topics.DataStructures) + "</li>";
        }
        if (topics.Databases)
        {
            popoverContent += "<li class='list-group-item'>" + Html.DisplayNameFor(model => topics.Databases) + "</li>";
        }
        if (topics.DistancedLearning)
        {
            popoverContent += "<li class='list-group-item'>" + Html.DisplayNameFor(model => topics.DistancedLearning) + "</li>";
        }
        if (topics.DistributedSystems)
        {
            popoverContent += "<li class='list-group-item'>" + Html.DisplayNameFor(model => topics.DistributedSystems) + "</li>";
        }
        if (topics.EthicalSocietalIssues)
        {
            popoverContent += "<li class='list-group-item'>" + Html.DisplayNameFor(model => topics.EthicalSocietalIssues) + "</li>";
        }
        if (topics.FirstYearComputing)
        {
            popoverContent += "<li class='list-group-item'>" + Html.DisplayNameFor(model => topics.FirstYearComputing) + "</li>";
        }
        if (topics.GenderIssues)
        {
            popoverContent += "<li class='list-group-item'>" + Html.DisplayNameFor(model => topics.GenderIssues) + "</li>";
        }
        if (topics.GrantWriting)
        {
            popoverContent += "<li class='list-group-item'>" + Html.DisplayNameFor(model => topics.GrantWriting) + "</li>";
        }
        if (topics.GraphicsImageProcessing)
        {
            popoverContent += "<li class='list-group-item'>" + Html.DisplayNameFor(model => topics.GraphicsImageProcessing) + "</li>";
        }
        if (topics.HumanComputerInteraction)
        {
            popoverContent += "<li class='list-group-item'>" + Html.DisplayNameFor(model => topics.HumanComputerInteraction) + "</li>";
        }
        if (topics.LaboratoryEnvironments)
        {
            popoverContent += "<li class='list-group-item'>" + Html.DisplayNameFor(model => topics.LaboratoryEnvironments) + "</li>";
        }
        if (topics.Literacy)
        {
            popoverContent += "<li class='list-group-item'>" + Html.DisplayNameFor(model => topics.Literacy) + "</li>";
        }
        if (topics.MathematicsInComputing)
        {
            popoverContent += "<li class='list-group-item'>" + Html.DisplayNameFor(model => topics.MathematicsInComputing) + "</li>";
        }
        if (topics.Multimedia)
        {
            popoverContent += "<li class='list-group-item'>" + Html.DisplayNameFor(model => topics.Multimedia) + "</li>";
        }
        if (topics.NetworkingDataCommunications)
        {
            popoverContent += "<li class='list-group-item'>" + Html.DisplayNameFor(model => topics.NetworkingDataCommunications) + "</li>";
        }
        if (topics.NonMajorCourses)
        {
            popoverContent += "<li class='list-group-item'>" + Html.DisplayNameFor(model => topics.NonMajorCourses) + "</li>";
        }
        if (topics.ObjectOrientedIssues)
        {
            popoverContent += "<li class='list-group-item'>" + Html.DisplayNameFor(model => topics.ObjectOrientedIssues) + "</li>";
        }
        if (topics.OperatingSystems)
        {
            popoverContent += "<li class='list-group-item'>" + Html.DisplayNameFor(model => topics.OperatingSystems) + "</li>";
        }
        if (topics.ParallelProcessing)
        {
            popoverContent += "<li class='list-group-item'>" + Html.DisplayNameFor(model => topics.ParallelProcessing) + "</li>";
        }
        if (topics.Pedagogy)
        {
            popoverContent += "<li class='list-group-item'>" + Html.DisplayNameFor(model => topics.Pedagogy) + "</li>";
        }
        if (topics.ProgrammingLanguages)
        {
            popoverContent += "<li class='list-group-item'>" + Html.DisplayNameFor(model => topics.ProgrammingLanguages) + "</li>";
        }
        if (topics.Research)
        {
            popoverContent += "<li class='list-group-item'>" + Html.DisplayNameFor(model => topics.Research) + "</li>";
        }
        if (topics.Security)
        {
            popoverContent += "<li class='list-group-item'>" + Html.DisplayNameFor(model => topics.Security) + "</li>";
        }
        if (topics.SoftwareEngineering)
        {
            popoverContent += "<li class='list-group-item'>" + Html.DisplayNameFor(model => topics.SoftwareEngineering) + "</li>";
        }
        if (topics.SystemsAnalysisAndDesign)
        {
            popoverContent += "<li class='list-group-item'>" + Html.DisplayNameFor(model => topics.SystemsAnalysisAndDesign) + "</li>";
        }
        if (topics.UsingTechnologyInTheClassroom)
        {
            popoverContent += "<li class='list-group-item'>" + Html.DisplayNameFor(model => topics.UsingTechnologyInTheClassroom) + "</li>";
        }
        if (topics.WebAndInternetProgramming)
        {
            popoverContent += "<li class='list-group-item'>" + Html.DisplayNameFor(model => topics.WebAndInternetProgramming) + "</li>";
        }
        if (topics.Other)
        {
            popoverContent += "<li class='list-group-item'>" + Html.DisplayFor(model => topics.OtherDescription) + Html.Display(" (Other)") + "</li>";
        }
        popoverContent += "</ol>";
        var contentHtml = "\"" + popoverContent + "\"";
        return Html.Raw(contentHtml);

    }

    //Method that creates the reviewer's complete name
    string GenerateFullName(ReviewerModel reviewer){
        string fullname = "";
        var isFirstName = string.IsNullOrWhiteSpace(reviewer.FirstName);
        var isMiddleInitial = string.IsNullOrWhiteSpace(reviewer.MiddleInitial);
        var isLastName = string.IsNullOrWhiteSpace(reviewer.LastName);

        if (!isFirstName)
        {
            fullname += reviewer.FirstName + " ";
        }
        if (!isMiddleInitial)
        {
            fullname += reviewer.MiddleInitial + " ";
        }
        if (!isLastName)
        {
            fullname += reviewer.LastName;
        }
        return fullname;
    }

    bool atLeastOnePaperHasReviewersAssigned = false;
    bool atLeastOnePaperHasNoReviewersAssigned = false;
    List<PaperReviewerModel> completedAssignments = new ();
    List<PaperReviewerModel> incompleteAssignments = new ();
    foreach(var item in Model)
    {
        if (item.AssignedReviewers.Count == 3)
        {
            atLeastOnePaperHasReviewersAssigned = true;
            completedAssignments.Add(item);
        }
        else
        {
            atLeastOnePaperHasNoReviewersAssigned = true;
            incompleteAssignments.Add(item);
        }
    }
}

<div class="accordion" id="accordionExample">
    @if (atLeastOnePaperHasNoReviewersAssigned)
    {
        <div class="accordion-item">
            <h2 class="accordion-header" id="headingOne">
                <button class="accordion-button" type="button" data-bs-toggle="collapse" 
                        data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                        Incomplete Tasks
                </button>
            </h2>
            
            <div id="collapseOne" class="accordion-collapse collapse show" aria-labelledby="headingOne" data-bs-parent="#accordionExample">
                <div class="accordion-body">
                    @{
                        foreach(var incompleteAssignment in incompleteAssignments)
                        {
                                                <form class="row needs-validation" novalidate asp-controller="PaperReviewer" asp-action = "Create">
                                                    <div class="col-md-4 align-items-center d-flex">
                                                        <span class="align-middle" data-bs-toggle="popover" title="Selected Topics" data-bs-content = @GeneratePopoverContent(incompleteAssignment.PaperModel)>
                                                        @Html.DisplayFor(modelItem => incompleteAssignment.PaperModel.Title)
                                                        </span>
                                                        <input name="paperID"  value= @incompleteAssignment.PaperModel.PaperID hidden />
                                                    </div>
                                                    @{
                                            for(int i = 0; i < 3; i++){
                                                                        <div class="col-md-2">
                                                                            @{
                                                        if(incompleteAssignment.AssignedReviewers.ElementAtOrDefault(i) != null){
                                                            var currentReviewer = incompleteAssignment.AssignedReviewers[i];
                                                                                                <span data-bs-toggle="popover" title="Interested Topics" 
                                                                                                      data-bs-content = @GeneratePopoverContent(currentReviewer)>@GenerateFullName(currentReviewer)
                                                                            </span>
                                                }
                                                else{
                                                    string selectName = string.Format("select_{0}",i);
                                                    
                                                                            <select name =@selectName class="form-select" id="validationCustom04" required>
                                                                                                    <option selected disabled value="">Choose A Reviewer</option>
                                                                                                    @{
                                                                    foreach(var availableReviewer in incompleteAssignment.AvailableReviewers)
                                                                    {
                                                                                                                        <option value=@availableReviewer.ReviewerID >@GenerateFullName(availableReviewer)</option>
                                                                    }
                                                                                                    }
                                                                                                 </select>
                                                        }
                                                                            }
                                                                            <div class="invalid-feedback">Please select a reviewer.</div>
                                                                        </div>
                                            }
                                                    }
                                                    <div class="col-md-2 d-flex justify-content-center">
                                                        <button class="btn btn-outline-primary" type = "submit" id="match_submit" 
                                                                data-paper-id=@incompleteAssignment.PaperModel.PaperID>Submit Change
                                                        </button>
                                                    </div>
                                                </form>
                                                <hr />
                        }
                    }
                </div>
            </div>
        </div>
    }
    
    @if (atLeastOnePaperHasReviewersAssigned)
    {
        <div class="accordion-item">
            <h2 class="accordion-header" id="headingTwo">
                <button class=@Html.Raw(!atLeastOnePaperHasNoReviewersAssigned?"accordion-button":"accordion-button collapsed") type="button" data-bs-toggle="collapse" 
                        data-bs-target="#collapseTwo" aria-expanded=@Html.Raw(!atLeastOnePaperHasNoReviewersAssigned?"True":"False") aria-controls="collapseTwo">
                    Completed Tasks
                </button>
            </h2>
            <div id="collapseTwo" class=@Html.Raw(!atLeastOnePaperHasNoReviewersAssigned?"accordion-collapse collapse show":"accordion-collapse collapse") aria-labelledby="headingTwo" data-bs-parent="#accordionExample">
                <div class="accordion-body">
                    <table class="table table-striped table-bordered" id="match_table" style="width:100%">
                        <thead>
                            <tr>
                                <th>Paper Title</th>
                                <th>Reviewer 1</th>
                                <th>Reviewer 2</th>
                                <th>Reviewer 3</th>
                            </tr>
                        </thead>
                        <tbody>
                            @{
                                foreach(var completedAssignment in completedAssignments)
                                {
                                                            <tr>
                                                                <td>
                                                                    <span data-bs-toggle="popover" title="Selected Topics" 
                                                                          data-bs-content = @GeneratePopoverContent(completedAssignment.PaperModel)>
                                                                          @Html.DisplayFor(modelItem => completedAssignment.PaperModel.Title)
                                                                    </span>
                                                                </td>
                                                                @{
                                            for(int i = 0; i < 3; i++)
                                            {
                                                                                                <td>
                                                                                                    @{
                                                        if (completedAssignment.AssignedReviewers.ElementAtOrDefault(i) != null)
                                                        {
                                                            var currentReviewer = completedAssignment.AssignedReviewers[i];
                                                                                                                                    <span data-bs-toggle="popover" title="Interested Topics" 
                                                                                                                                    data-bs-content = @GeneratePopoverContent(currentReviewer)>
                                                                                                                                        @GenerateFullName(currentReviewer)
                                                                                                                                    </span>
                                                        }
                                                                                                    }
                                                                                                </td>
                                            }
                                                                }
                                                            </tr>
                                    
                                }
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }
    
</div>

    
    

@section scripts{
    <script src = "https://cdn.datatables.net/1.12.1/js/jquery.dataTables.min.js" ></script>
    <script src = "https://cdn.datatables.net/1.12.1/js/dataTables.bootstrap5.js" ></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/js/bootstrap.bundle.js" 
            integrity="sha384-A3rJD856KowSb7dwlZdYEkO39Gagi7vIsF0jrRAoQmDKKtQBHUuLZ9AsSv4jD4Xa" 
            crossorigin="anonymous">
    </script>

    <script>
        
        $(document).ready(function () {
            "use strict";
            var forms = document.querySelectorAll(".needs-validation");
            Array.prototype.slice.call(forms).forEach(function (form) {
                form.addEventListener("submit", function (event) {
                    if (!form.checkValidity()) {
                        event.preventDefault();
                        event.stopPropagation();
                    }
                    form.classList.add("was-validated");
                  },false);
              });
              $('.col-md-2 span').each(function(){
                  $(this).parent().attr('class', 'col-md-2 align-items-center d-flex')
              }); 
            $('#match_table').DataTable({
                destroy: true,
                paging: true,
                scrollX: true,
                lengthChange: true,
                searching: true,
                ordering: true
            });
            /*--Code Template directly copied from Bootstrap5--*/
            var popoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="popover"]'));
            var popoverList = popoverTriggerList.map(function (popoverTriggerEl) {
                return new bootstrap.Popover(
                    popoverTriggerEl, 
                    {
                        html    : true,
                        trigger : 'hover'
                    });
            });
           
        });

    </script>
}